<?php

class ExploitationController extends \BaseController {

    public function select2($agriculteurID){

      $page = \Input::get('page', 0);
      $length = \Input::get('length', 10);
      $search = \Input::get('q');
      $order = \Input::get('order', 'Ref');
      
      $query = Exploitation::getQuery();
      $query->where('AgriculteurID', '=', $agriculteurID);
      
      $total = $query->count();
      if($search != ''){
        $query->where(function($q) use($search){
          $q->where(DB::raw('LOWER(Ref)'), 'LIKE', Str::lower('%' . trim($search) . '%' ));
          $q->orwhere(DB::raw('LOWER(Nom)'), 'LIKE', Str::lower('%' . trim($search) . '%' ));
        });
      }
      $total_search = $query->count();
      if (!is_null($page) && !is_null($length)) {
        $start = (int)(($page-1) * $length);
        $query = $query->skip($start)->take($length);
      }
      
      $query->orderBy($order, 'ASC');
      
      $list = $query->get();

      $datatable = new DataTableResponse(1, $total, $total_search, $list, null);

      return Response::json($datatable);      
    }

    public function index()
    {
      return  View::make('exploitation.index');
    }

    public function datatable(){

      $draw = \Input::get('draw');
      $start = \Input::get('start', 0);
      $length = \Input::get('length', 10);
      $search = \Input::get('search');
      $order = \Input::get('order');
      $columns = \Input::get('columns');


      $query = DB::table('exploitation')
        ->where('AgriculteurID', '=', Auth::user()->UtilisateurID);

      $total = $query->count();

      if($search['value'] != ''){
        $query->where(function($q) use($search){
          $q->where(DB::raw('LOWER(exploitation.Nom)'), 'LIKE', Str::lower('%' . trim($search['value']) . '%' ));
          $q->where(DB::raw('LOWER(exploitation.Ref)'), 'LIKE', Str::lower('%' . trim($search['value']) . '%' ));
        });
      }

      $total_search = $query->count();

      if (!is_null($start) && !is_null($length)) {
        $query = $query->skip($start)->take($length);
      }

      if (is_array($order) && count($order) > 0) {
          for ($i = 0, $c = count($order); $i < $c; $i++) {
              $order_col = (int)$order[$i]['column'];
              if (isset($columns[$order_col])) {
                  if ($columns[$order_col]['orderable'] == "true") {
                      $query->orderBy($columns[$order_col]['name'], $order[$i]['dir']);
                  }
              }
          }
      }
      $list = $query->select('exploitation.*')->get();

      $datatable = new DataTableResponse($draw, $total, $total_search, $list, null);

      return Response::json($datatable);      
    }

    public function create()
    {
      return View::make('exploitation.create');
    }

    public function store(){
      $validation = Validator::make(\Input::all(), 
        array(
          'Ref' => 'required',
          'Nom' => 'required',
          'Superficie' => 'numeric',
          'Longitude' => 'numeric',
          'Latitude' => 'numeric',
          'NbrCultivateur' => 'numeric'
          ), 
        array(
          'Ref.required' => "La référnce est obligatoire",
          'Nom.required' => "Le nom est obligatoire",
          'Superficie.numeric' => "La superficie doit-être au format numérique",
          'Longitude.numeric' => "La longitude doit-être au format numérique",
          'Latitude.numeric' => "La latitude doit-être au format numérique",
          'NbrCultivateur.numeric' => "Le nombre de cultivateurs doit-être au format numérique"
        )
      );

      if ($validation->fails()) {
          
          return Redirect::to('exploitation/create')
              ->withErrors($validation)
              ->withInput(\Input::all());
        } else {
          $exploitation = new Exploitation();
          $exploitation->Ref = \Input::get('Ref');
          $exploitation->Nom = \Input::get('Nom');
          $exploitation->Superficie = \Input::get('Superficie');
          $exploitation->Longitude = \Input::get('Longitude');
          $exploitation->Latitude = \Input::get('Latitude');
          $exploitation->NbrCultivateur = \Input::get('NbrCultivateur');
          $exploitation->AgriculteurID = Auth::user()->UtilisateurID;
          
          $exploitation->save();

          $modifierUrl = URL::to('exploitation/' . $exploitation->ExploitationID . '/edit');
          Session::flash('success', "<p>Création de l'exploitation effectuée avec succès ! <a href='{$modifierUrl}' class='btn btn-success'>Modifier l'exploitation</a></p>");
          return Redirect::to('exploitation');
        }
    }

    public function edit($id)
    {
      $exploitation = Exploitation::find($id);
      
      $produits = Produit::get();
        
      $produitsSelected = Produit::getQuery()
        ->join('exploitation_produit', 'exploitation_produit.ProduitID', '=', 'produit.ProduitID')
        ->where('exploitation_produit.ExploitationID', $id)
        ->select('produit.ProduitID')
        ->get();
      $produitsSelected = $this->objectsToArray($produitsSelected, 'ProduitID', 'ProduitID');

      return View::make('exploitation.edit')
        ->with('exploitation', $exploitation)
        ->with('produits', $produits)
        ->with('produitsSelected', $produitsSelected);

    }

    public function update($id){

      $validation = Validator::make(\Input::all(), 
        array(
          'Ref' => 'required',
          'Nom' => 'required',
          'Superficie' => 'numeric',
          'Longitude' => 'numeric',
          'Latitude' => 'numeric',
          'NbrCultivateur' => 'numeric'
          ), 
        array(
          'Ref.required' => "La référnce est obligatoire",
          'Nom.required' => "Le nom est obligatoire",
          'Superficie.numeric' => "La superficie doit-être au format numérique",
          'Longitude.numeric' => "La longitude doit-être au format numérique",
          'Latitude.numeric' => "La latitude doit-être au format numérique",
          'NbrCultivateur.numeric' => "Le nombre de cultivateurs doit-être au format numérique"
        )
      );

      if ($validation->fails()) {
          return Redirect::to('exploitation/' . $id . '/edit')
              ->withErrors($validation)
              ->withInput(\Input::all());
      } else {
          $exploitation = Exploitation::find($id);
          $exploitation->Ref = \Input::get('Ref');
          $exploitation->Nom = \Input::get('Nom');
          $exploitation->Superficie = \Input::get('Superficie');
          $exploitation->Longitude = \Input::get('Longitude');
          $exploitation->Latitude = \Input::get('Latitude');
          $exploitation->NbrCultivateur = \Input::get('NbrCultivateur');
          $exploitation->AgriculteurID = Auth::user()->UtilisateurID;
          
          $exploitation->save();

          //Mettre à jour les associations compteur
          if(is_array(\Input::get('ProduitID'))){
            $produit_ids = array();
            $produit_arr = \Input::get('ProduitID');
            foreach ($produit_arr as $key => $produit_id){
              $size = ExploitationProduit::where('ProduitID', $produit_id)->where('ExploitationID',  $exploitation->ExploitationID)->count();
              if($size <= 0){
                $exploitationProduit = new ExploitationProduit();
                $exploitationProduit->ExploitationID = $exploitation->ExploitationID;
                $exploitationProduit->ProduitID = $produit_id;
                $exploitationProduit->save();
              }
              $produit_ids[] = $produit_id;
            }
            
            $existing_exploitationProduit = ExploitationProduit::where('ExploitationID', $exploitation->ExploitationID)->get();  

            foreach ($existing_exploitationProduit as $exploitationProduit){
              if(!in_array($exploitationProduit->ProduitID, $produit_ids)){
                  ExploitationProduit::where('ProduitID', $exploitationProduit->ProduitID)
                    ->where('ExploitationID', $exploitationProduit->ExploitationID)
                    ->delete();
              }
            }
          }else{
              ExploitationProduit::where('ExploitationID', $exploitation->ExploitationID)
                ->delete();
          }
        
          $modifierUrl = URL::to('exploitation/' . $exploitation->ExploitationID . '/edit');
          Session::flash('success', "<p>Mise-à-jour de l'exploitation effectuée avec succès ! <a href='{$modifierUrl}' class='btn btn-success'>Modifier l'exploitation</a></p>");
          return Redirect::to('exploitation');
      }
    }

    public function destroy($id)
    {
      $exploitation = Exploitation::find($id);
      $exploitation->delete();

      // redirect
      Session::flash('success', "Exploitation supprimée avec succès !");
      return Redirect::to('exploitation');
    }

    
    private function objectsToArray($objs, $key, $val){
      $arr = array();
      foreach($objs as $obj){
        $arr[$obj->$key] = $obj->$val;
      }
      return $arr;
    }    
}